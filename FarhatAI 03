def load_mnist():
    url = "http://deeplearning.net/data/mnist/mnist.pkl.gz"
    filename = "mnist.pkl.gz"
    
    # Download the dataset
    request.urlretrieve(url, filename)
    
    # Load the dataset
    with gzip.open(filename, 'rb') as f:
        train_set, valid_set, test_set = pickle.load(f, encoding='latin1')
    
    return train_set, valid_set, test_set

def sigmoid(z):
    return 1 / (1 + np.exp(-z))

def sigmoid_derivative(z):
    return z * (1 - z)

def one_hot_encode(labels, num_classes):
    return np.eye(num_classes)[labels]

class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size):
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.output_size = output_size
        
        # Initialize weights and biases
        self.W1 = np.random.randn(input_size, hidden_size) * 0.01
        self.b1 = np.zeros((1, hidden_size))
        self.W2 = np.random.randn(hidden_size, output_size) * 0.01
        self.b2 = np.zeros((1, output_size))
    
    def forward(self, X):
        self.z1 = np.dot(X, self.W1) + self.b1
        self.a1 = sigmoid(self.z1)
        self.z2 = np.dot(self.a1, self.W2) + self.b2
        self.a2 = sigmoid(self.z2)
        return self.a2
    
    def compute_loss(self, Y, output):
        return np.mean(np.square(Y - output))
    
    def backward(self, X, Y, output, learning_rate):
        m = X.shape[0]
        
        d_loss_output = 2 * (output - Y) / m
        d_output_z2 = sigmoid_derivative(output)
        d_z2_W2 = self.a1.T
        d_loss_W2 = np.dot(d_z2_W2, d_loss_output * d_output_z2)
        
        d_loss_b2 = np.sum(d_loss_output * d_output_z2, axis=0, keepdims=True)
        
        d_loss_a1 = np.dot(d_loss_output * d_output_z2, self.W2.T)
        d_a1_z1 = sigmoid_derivative(self.a1)
        d_z1_W1 = X.T
        d_loss_W1 = np.dot(d_z1_W1, d_loss_a1 * d_a1_z1)
        
        d_loss_b1 = np.sum(d_loss_a1 * d_a1_z1, axis=0, keepdims=True)
        
        self.W1 -= learning_rate * d_loss_W1
        self.b1 -= learning_rate * d_loss_b1
        self.W2 -= learning_rate * d_loss_W2
        self.b2 -= learning_rate * d_loss_b2
    
    def train(self, X, Y, epochs=1000, learning_rate=0.01):
        for epoch in range(epochs):
            output = self.forward(X)
            loss = self.compute_loss(Y, output)
            self.backward(X, Y, output, learning_rate)
            if epoch % 100 == 0:
                print(f'Epoch {epoch}, Loss: {loss}')

def predict(nn, X):
    output = nn.forward(X)
    return np.argmax(output, axis=1)

# Load data
train_set, valid_set, test_set = load_mnist()
X_train, y_train = train_set
X_valid, y_valid = valid_set
X_test, y_test = test_set

# Normalize data
X_train = X_train / 255.0
X_valid = X_valid / 255.0
X_test = X_test / 255.0

# One-hot encode labels
y_train_encoded = one_hot_encode(y_train, 10)
y_valid_encoded = one_hot_encode(y_valid, 10)
y_test_encoded = one_hot_encode(y_test, 10)

# Initialize and train the neural network
input_size = 784  # 28x28 pixels
hidden_size = 64
output_size = 10  # 10 classes for the digits 0-9
learning_rate = 0.01
epochs = 1000

nn = NeuralNetwork(input_size, hidden_size, output_size)
nn.train(X_train, y_train_encoded, epochs, learning_rate)

# Evaluate the model
y_pred = predict(nn, X_test)
accuracy = np.mean(y_pred == y_test)
print(f'Test Accuracy: {accuracy}')